<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="bot.cpp" line="807" id="memsetClassFloat" severity="style" msg="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="bot.cpp" line="807" id="memsetClassFloat" severity="style" msg="Using memset() on class which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="bot.cpp" line="593" id="nullPointerRedundantCheck" severity="style" msg="Either the condition &apos;arg1==0&apos; is redundant or there is possible null pointer dereference: arg1." />
    <error file="cbase.h" line="399" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="bot.cpp" line="1832" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="bot.cpp" line="398" id="variableScope" severity="style" msg="The scope of the variable &apos;length&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="398" id="variableScope" severity="style" msg="The scope of the variable &apos;str_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="514" id="variableScope" severity="style" msg="The scope of the variable &apos;valve_bot_skins&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="524" id="variableScope" severity="style" msg="The scope of the variable &apos;valve_bot_names&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="540" id="variableScope" severity="style" msg="The scope of the variable &apos;index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="1020" id="variableScope" severity="style" msg="The scope of the variable &apos;can_pickup&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="2556" id="variableScope" severity="style" msg="The scope of the variable &apos;pPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="2887" id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="3578" id="variableScope" severity="style" msg="The scope of the variable &apos;pPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot.cpp" line="4675" id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" />
    <error file="bot.cpp" line="820" id="unreadVariable" severity="style" msg="Variable &apos;infobuffer&apos; is assigned a value that is never used." />
    <error file="bot.cpp" line="822" id="unreadVariable" severity="style" msg="Variable &apos;clientIndex&apos; is assigned a value that is never used." />
    <error file="bot.cpp" line="3817" id="unusedVariable" severity="style" msg="Unused variable: tr" />
    <error file="../metamod-p-37/metamod/mreg.h" line="75" id="noConstructor" severity="style" msg="The class &apos;MRegCmd&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="../metamod-p-37/metamod/mreg.h" line="118" id="noConstructor" severity="style" msg="The class &apos;MRegCvar&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="../metamod-p-37/metamod/mreg.h" line="160" id="noConstructor" severity="style" msg="The class &apos;MRegMsg&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="cbase.h" line="122" id="noConstructor" severity="style" msg="The class &apos;EHANDLE&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="list.h" line="184" id="uninitMemberVar" severity="style" msg="Member variable &apos;LIter&lt;Type&gt;::currentNode&apos; is not initialized in the constructor." />
    <error file="list.h" line="184" id="uninitMemberVar" severity="style" msg="Member variable &apos;LIter&lt;char*&gt;::currentNode&apos; is not initialized in the constructor." />
    <error file="cbase.h" line="198" id="duplInheritedMember" severity="style" msg="The class &apos;CBaseDelay&apos; defines member variable with name &apos;m_SaveData&apos; also defined in its parent class &apos;CBaseEntity&apos;." />
    <error file="cbase.h" line="634" id="duplInheritedMember" severity="style" msg="The class &apos;CBaseAnimating&apos; defines member variable with name &apos;m_SaveData&apos; also defined in its parent class &apos;CBaseDelay&apos;." />
    <error file="cbase.h" line="646" id="duplInheritedMember" severity="style" msg="The class &apos;CBaseToggle&apos; defines member variable with name &apos;m_SaveData&apos; also defined in its parent class &apos;CBaseAnimating&apos;." />
    <error file="cbase.h" line="717" id="duplInheritedMember" severity="style" msg="The class &apos;CBaseButton&apos; defines member variable with name &apos;m_SaveData&apos; also defined in its parent class &apos;CBaseToggle&apos;." />
    <error file="vector.h" line="74" id="noExplicitConstructor" severity="style" msg="Class &apos;Vector&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="../hlsdk-2.3-p4/multiplayer/dlls/saverestore.h" line="25" id="noExplicitConstructor" severity="style" msg="Class &apos;CSaveRestoreBuffer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="../hlsdk-2.3-p4/multiplayer/dlls/saverestore.h" line="54" id="noExplicitConstructor" severity="style" msg="Class &apos;CSave&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="../hlsdk-2.3-p4/multiplayer/dlls/saverestore.h" line="89" id="noExplicitConstructor" severity="style" msg="Class &apos;CRestore&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="list.h" line="184" id="noExplicitConstructor" severity="style" msg="Class &apos;LIter&lt;Type&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="list.h" line="184" id="noExplicitConstructor" severity="style" msg="Class &apos;LIter&lt;char*&gt;&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="bot.h" line="187" id="unusedStructMember" severity="style" msg="struct member &apos;bot_current_weapon_t::iId&apos; is never used." />
    <error file="bot.h" line="188" id="unusedStructMember" severity="style" msg="struct member &apos;bot_current_weapon_t::iClip&apos; is never used." />
    <error file="bot.h" line="189" id="unusedStructMember" severity="style" msg="struct member &apos;bot_current_weapon_t::iAmmo1&apos; is never used." />
    <error file="bot.h" line="190" id="unusedStructMember" severity="style" msg="struct member &apos;bot_current_weapon_t::iAmmo2&apos; is never used." />
    <error file="bot.h" line="195" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::fairplay&apos; is never used." />
    <error file="bot.h" line="197" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::aggression&apos; is never used." />
    <error file="bot.h" line="198" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::faveClass&apos; is never used." />
    <error file="bot.h" line="199" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::camper&apos; is never used." />
    <error file="bot.h" line="200" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::health&apos; is never used." />
    <error file="bot.h" line="201" id="unusedStructMember" severity="style" msg="struct member &apos;bot_trait_struct::humour&apos; is never used." />
    <error file="bot.h" line="210" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::f_bufferedTime&apos; is never used." />
    <error file="bot.h" line="211" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::priority&apos; is never used." />
    <error file="bot.h" line="213" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::phase&apos; is never used." />
    <error file="bot.h" line="214" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::phase_timer&apos; is never used." />
    <error file="bot.h" line="216" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::waypoint&apos; is never used." />
    <error file="bot.h" line="217" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::waypointTwo&apos; is never used." />
    <error file="bot.h" line="221" id="unusedStructMember" severity="style" msg="struct member &apos;job_struct::message&apos; is never used." />
    <error file="bot.h" line="230" id="unusedStructMember" severity="style" msg="struct member &apos;job_blacklist_struct::type&apos; is never used." />
    <error file="bot.h" line="231" id="unusedStructMember" severity="style" msg="struct member &apos;job_blacklist_struct::f_timeOut&apos; is never used." />
    <error file="bot.h" line="240" id="unusedStructMember" severity="style" msg="struct member &apos;teleporterPair_struct::entranceWP&apos; is never used." />
    <error file="bot.h" line="242" id="unusedStructMember" severity="style" msg="struct member &apos;teleporterPair_struct::exitWP&apos; is never used." />
    <error file="bot.h" line="249" id="unusedStructMember" severity="style" msg="struct member &apos;enemyStruct::seenWithFlag&apos; is never used." />
    <error file="bot.h" line="252" id="unusedStructMember" severity="style" msg="struct member &apos;enemyStruct::f_firstSeen&apos; is never used." />
    <error file="bot.h" line="253" id="unusedStructMember" severity="style" msg="struct member &apos;enemyStruct::f_lastSeen&apos; is never used." />
    <error file="bot.h" line="255" id="unusedStructMember" severity="style" msg="struct member &apos;enemyStruct::f_seenDistance&apos; is never used." />
    <error file="bot.h" line="533" id="unusedStructMember" severity="style" msg="struct member &apos;FLAG_S::mdl_match&apos; is never used." />
    <error file="bot.h" line="534" id="unusedStructMember" severity="style" msg="struct member &apos;FLAG_S::team_no&apos; is never used." />
    <error file="bot.h" line="540" id="unusedStructMember" severity="style" msg="struct member &apos;home_struct::waypoint&apos; is never used." />
    <error file="bot.h" line="541" id="unusedStructMember" severity="style" msg="struct member &apos;home_struct::f_last_update_time&apos; is never used." />
    <error file="bot_client.cpp" line="982" id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_client.cpp" line="808" id="unreadVariable" severity="style" msg="Variable &apos;fade_flags&apos; is assigned a value that is never used." />
    <error file="bot_client.cpp" line="990" id="unreadVariable" severity="style" msg="Variable &apos;s&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="230" id="variableScope" severity="style" msg="The scope of the variable &apos;pPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_combat.cpp" line="1510" id="variableScope" severity="style" msg="The scope of the variable &apos;iId&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_combat.cpp" line="1612" id="unreadVariable" severity="style" msg="Variable &apos;base_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="1613" id="unreadVariable" severity="style" msg="Variable &apos;min_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="1614" id="unreadVariable" severity="style" msg="Variable &apos;max_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="1644" id="unreadVariable" severity="style" msg="Variable &apos;base_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="1645" id="unreadVariable" severity="style" msg="Variable &apos;min_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="1646" id="unreadVariable" severity="style" msg="Variable &apos;max_delay&apos; is assigned a value that is never used." />
    <error file="bot_combat.cpp" line="2446" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="bot_navigate.cpp" line="1010" id="variableScope" severity="style" msg="The scope of the variable &apos;pPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_navigate.cpp" line="1091" id="unreadVariable" severity="style" msg="Variable &apos;className&apos; is assigned a value that is never used." />
    <error file="bot_navigate.cpp" line="1129" id="unreadVariable" severity="style" msg="Variable &apos;className&apos; is assigned a value that is never used." />
    <error file="bot_start.cpp" line="57" id="variableScope" severity="style" msg="The scope of the variable &apos;c_team&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_start.cpp" line="58" id="variableScope" severity="style" msg="The scope of the variable &apos;c_class&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_start.cpp" line="60" id="variableScope" severity="style" msg="The scope of the variable &apos;team&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="bot_weapons.h" line="164" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::szClassname&apos; is never used." />
    <error file="bot_weapons.h" line="165" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iAmmo1&apos; is never used." />
    <error file="bot_weapons.h" line="166" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iAmmo1Max&apos; is never used." />
    <error file="bot_weapons.h" line="167" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iAmmo2&apos; is never used." />
    <error file="bot_weapons.h" line="168" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iAmmo2Max&apos; is never used." />
    <error file="bot_weapons.h" line="169" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iSlot&apos; is never used." />
    <error file="bot_weapons.h" line="170" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iPosition&apos; is never used." />
    <error file="bot_weapons.h" line="171" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iId&apos; is never used." />
    <error file="bot_weapons.h" line="172" id="unusedStructMember" severity="style" msg="struct member &apos;bot_weapon_t::iFlags&apos; is never used." />
    <error file="dll.cpp" line="702" id="memsetClassFloat" severity="style" msg="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="dll.cpp" line="702" id="memsetClassFloat" severity="style" msg="Using memset() on class which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="dll.cpp" line="2791" id="memsetClassFloat" severity="style" msg="Using memset() on class which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="dll.cpp" line="2791" id="memsetClassFloat" severity="style" msg="Using memset() on struct which contains a floating point number. This is not portable because memset() sets each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined. Note: In case of an IEEE754-1985 compatible implementation setting all bits to zero results in the value 0.0." />
    <error file="dll.cpp" line="3466" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4793" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4828" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4863" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4898" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4936" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="4971" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5006" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5041" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5085" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5125" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5165" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="5205" id="duplicateExpression" severity="style" msg="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." />
    <error file="dll.cpp" line="819" id="variableScope" severity="style" msg="The scope of the variable &apos;used&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1247" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_pent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1248" id="variableScope" severity="style" msg="The scope of the variable &apos;flag_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1984" id="variableScope" severity="style" msg="The scope of the variable &apos;blue_state&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1984" id="variableScope" severity="style" msg="The scope of the variable &apos;red_state&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1984" id="variableScope" severity="style" msg="The scope of the variable &apos;yellow_state&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="1984" id="variableScope" severity="style" msg="The scope of the variable &apos;green_state&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="2672" id="variableScope" severity="style" msg="The scope of the variable &apos;pPlayer&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="2679" id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="2685" id="variableScope" severity="style" msg="The scope of the variable &apos;filename&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="2686" id="variableScope" severity="style" msg="The scope of the variable &apos;mapname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="5948" id="variableScope" severity="style" msg="The scope of the variable &apos;temp_pent&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="5949" id="variableScope" severity="style" msg="The scope of the variable &apos;flag_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="dll.cpp" line="320" id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" />
    <error file="dll.cpp" line="321" id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" />
    <error file="dll.cpp" line="981" id="shiftNegative" severity="error" msg="Shifting a negative value is undefined behaviour" />
    <error file="dll.cpp" line="441" id="unreadVariable" severity="style" msg="Variable &apos;done&apos; is assigned a value that is never used." />
    <error file="dll.cpp" line="587" id="unreadVariable" severity="style" msg="Variable &apos;msg&apos; is assigned a value that is never used." />
    <error file="dll.cpp" line="676" id="arrayIndexOutOfBounds" severity="error" msg="Array &apos;bots[32]&apos; accessed at index 32, which is out of bounds." />
    <error file="dll.cpp" line="6210" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6212" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6217" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6219" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6223" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6225" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6229" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="6231" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;cmd_index&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="dll.cpp" line="1814" id="invalidscanf" severity="style" msg='scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:    %s =&gt; %20sSample program that can crash:#include &lt;stdio.h&gt;int main(){    char c[5];    scanf(&quot;%s&quot;, c);    return 0;}Typing in 5 or more characters may make the program crash. The correct usage here is &apos;scanf(&quot;%4s&quot;, c);&apos;, as the maximum field width does not include the terminating null byte.Source: http://linux.die.net/man/3/scanfSource: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c' />
    <error file="engine.cpp" line="181" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="182" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="320" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="321" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="642" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="646" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="647" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="686" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="687" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="2688" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="2689" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="engine.cpp" line="2062" id="variableScope" severity="style" msg="The scope of the variable &apos;k&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="engine.cpp" line="2075" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;i&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="engine.cpp" line="2094" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;j&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="engine.cpp" line="2102" id="arrayIndexThenCheck" severity="style" msg="Defensive programming: The variable &apos;j&apos; is used as an array index before it is checked that is within limits. This can mean that the array might be accessed out of bounds. Reorder conditions such as &apos;(a[i] &amp;&amp; i &lt; 10)&apos; to &apos;(i &lt; 10 &amp;&amp; a[i])&apos;. That way the array will not be accessed if the index is out of limits." />
    <error file="list.h" line="149" id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." />
    <error file="waypoint.cpp" line="3154" id="invalidPrintfArgType_sint" severity="style" msg="%d in format string (no. 2) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." />
    <error file="waypoint.cpp" line="3154" id="invalidPrintfArgType_sint" severity="style" msg="%d in format string (no. 3) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." />
    <error file="waypoint.cpp" line="243" id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="346" id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="936" id="variableScope" severity="style" msg="The scope of the variable &apos;rand_index&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="1169" id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="1424" id="variableScope" severity="style" msg="The scope of the variable &apos;waypoint2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="1464" id="variableScope" severity="style" msg="The scope of the variable &apos;waypoint2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="1961" id="variableScope" severity="style" msg="The scope of the variable &apos;curr_height&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="3662" id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="3950" id="variableScope" severity="style" msg="The scope of the variable &apos;msg&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="waypoint.cpp" line="141" id="unreadVariable" severity="style" msg="Variable &apos;y&apos; is assigned a value that is never used." />
    <error file="waypoint.cpp" line="4260" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4271" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4283" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4305" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4345" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4356" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4368" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4390" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4429" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4440" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4452" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4474" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4536" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4547" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4559" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4581" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4628" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4640" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4653" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4675" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4793" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4834" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4885" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="4926" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5023" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5064" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5115" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5156" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5229" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5270" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5319" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5360" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5451" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5452" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5454" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5524" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5525" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="5527" id="negativeIndex" severity="error" msg="Array index -1 is out of bounds." />
    <error file="waypoint.cpp" line="140" id="uninitvar" severity="error" msg="Uninitialized variable: x" />
    <error file="waypoint.cpp" line="141" id="uninitvar" severity="error" msg="Uninitialized variable: y" />
    <error file="waypoint.h" line="94" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT_HDR::filetype&apos; is never used." />
    <error file="waypoint.h" line="95" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT_HDR::waypoint_file_version&apos; is never used." />
    <error file="waypoint.h" line="96" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT_HDR::waypoint_file_flags&apos; is never used." />
    <error file="waypoint.h" line="97" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT_HDR::number_of_waypoints&apos; is never used." />
    <error file="waypoint.h" line="98" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT_HDR::mapname&apos; is never used." />
    <error file="waypoint.h" line="103" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT::flags&apos; is never used." />
    <error file="waypoint.h" line="104" id="unusedStructMember" severity="style" msg="struct member &apos;WAYPOINT::script_flags&apos; is never used." />
    <error file="waypoint.h" line="133" id="unusedStructMember" severity="style" msg="struct member &apos;area::namea&apos; is never used." />
    <error file="waypoint.h" line="134" id="unusedStructMember" severity="style" msg="struct member &apos;area::nameb&apos; is never used." />
    <error file="waypoint.h" line="135" id="unusedStructMember" severity="style" msg="struct member &apos;area::namec&apos; is never used." />
    <error file="waypoint.h" line="136" id="unusedStructMember" severity="style" msg="struct member &apos;area::named&apos; is never used." />
    <error file="waypoint.h" line="137" id="unusedStructMember" severity="style" msg="struct member &apos;area::flags&apos; is never used." />
    <error file="waypoint.h" line="144" id="unusedStructMember" severity="style" msg="struct member &apos;AREA_HDR::filetype&apos; is never used." />
    <error file="waypoint.h" line="145" id="unusedStructMember" severity="style" msg="struct member &apos;AREA_HDR::area_file_version&apos; is never used." />
    <error file="waypoint.h" line="146" id="unusedStructMember" severity="style" msg="struct member &apos;AREA_HDR::number_of_areas&apos; is never used." />
    <error file="waypoint.h" line="147" id="unusedStructMember" severity="style" msg="struct member &apos;AREA_HDR::mapname&apos; is never used." />
    <error file="player.h" line="193" id="unusedFunction" severity="style" msg="The function &apos;BodyTarget&apos; is never used." />
    <error file="bot_navigate.cpp" line="236" id="unusedFunction" severity="style" msg="The function &apos;BotMatchFacing&apos; is never used." />
    <error file="vector.h" line="86" id="unusedFunction" severity="style" msg="The function &apos;CopyToArray&apos; is never used." />
    <error file="vector.h" line="114" id="unusedFunction" severity="style" msg="The function &apos;CrossProduct&apos; is never used." />
    <error file="dll.cpp" line="5946" id="unusedFunction" severity="style" msg="The function &apos;DispatchKeyValue_Post&apos; is never used." />
    <error file="h_export.cpp" line="65" id="unusedFunction" severity="style" msg="The function &apos;DllMain&apos; is never used." />
    <error file="sdk_util.h" line="72" id="unusedFunction" severity="style" msg="The function &apos;ENTITY_SET_KEYVALUE&apos; is never used." />
    <error file="dll.cpp" line="5647" id="unusedFunction" severity="style" msg="The function &apos;GetNewDLLFunctions&apos; is never used." />
    <error file="h_export.cpp" line="95" id="unusedFunction" severity="style" msg="The function &apos;GiveFnptrsToDll&apos; is never used." />
    <error file="util.cpp" line="227" id="unusedFunction" severity="style" msg="The function &apos;HUDNotify&apos; is never used." />
    <error file="player.h" line="222" id="unusedFunction" severity="style" msg="The function &apos;IsNetClient&apos; is never used." />
    <error file="player.h" line="217" id="unusedFunction" severity="style" msg="The function &apos;IsPlayer&apos; is never used." />
    <error file="player.h" line="205" id="unusedFunction" severity="style" msg="The function &apos;IsSneaking&apos; is never used." />
    <error file="sdk_util.h" line="94" id="unusedFunction" severity="style" msg="The function &apos;LOCALINFO&apos; is never used." />
    <error file="meta_api.cpp" line="90" id="unusedFunction" severity="style" msg="The function &apos;Meta_Attach&apos; is never used." />
    <error file="meta_api.cpp" line="114" id="unusedFunction" severity="style" msg="The function &apos;Meta_Detach&apos; is never used." />
    <error file="meta_api.cpp" line="56" id="unusedFunction" severity="style" msg="The function &apos;Meta_Init&apos; is never used." />
    <error file="meta_api.cpp" line="65" id="unusedFunction" severity="style" msg="The function &apos;Meta_Query&apos; is never used." />
    <error file="sdk_util.h" line="79" id="unusedFunction" severity="style" msg="The function &apos;SERVERINFO&apos; is never used." />
    <error file="bot.cpp" line="233" id="unusedFunction" severity="style" msg="The function &apos;SET_CLIENT_KEY_VALUE&apos; is never used." />
    <error file="sdk_util.h" line="101" id="unusedFunction" severity="style" msg="The function &apos;SET_LOCALINFO&apos; is never used." />
    <error file="sdk_util.h" line="86" id="unusedFunction" severity="style" msg="The function &apos;SET_SERVERINFO&apos; is never used." />
    <error file="player.h" line="213" id="unusedFunction" severity="style" msg="The function &apos;ShouldFadeOnDeath&apos; is never used." />
    <error file="player.h" line="197" id="unusedFunction" severity="style" msg="The function &apos;StartSneaking&apos; is never used." />
    <error file="player.h" line="201" id="unusedFunction" severity="style" msg="The function &apos;StopSneaking&apos; is never used." />
    <error file="util.cpp" line="207" id="unusedFunction" severity="style" msg="The function &apos;UTIL_FindEntityByTargetname&apos; is never used." />
    <error file="bot_navigate.cpp" line="209" id="unusedFunction" severity="style" msg="The function &apos;UTIL_FindEntityInSphere&apos; is never used." />
    <error file="util.cpp" line="464" id="unusedFunction" severity="style" msg="The function &apos;UTIL_GetClass&apos; is never used." />
    <error file="util.cpp" line="447" id="unusedFunction" severity="style" msg="The function &apos;UTIL_GetFlagsTeam&apos; is never used." />
    <error file="util.cpp" line="249" id="unusedFunction" severity="style" msg="The function &apos;UTIL_SayText&apos; is never used." />
    <error file="util.cpp" line="222" id="unusedFunction" severity="style" msg="The function &apos;UTIL_SetOrigin&apos; is never used." />
    <error file="util.cpp" line="217" id="unusedFunction" severity="style" msg="The function &apos;UTIL_SetSize&apos; is never used." />
    <error file="waypoint.cpp" line="132" id="unusedFunction" severity="style" msg="The function &apos;WaypointDebug&apos; is never used." />
    <error file="waypoint.cpp" line="2032" id="unusedFunction" severity="style" msg="The function &apos;WaypointDirectPathCheck&apos; is never used." />
    <error file="waypoint.cpp" line="376" id="unusedFunction" severity="style" msg="The function &apos;WaypointFindPath&apos; is never used." />
    <error file="list.h" line="196" id="unusedFunction" severity="style" msg="The function &apos;beginReverse&apos; is never used." />
    <error file="linkfunc.cpp" line="1695" id="unusedFunction" severity="style" msg="The function &apos;tf_ammo_rpgclip&apos; is never used." />
    <error file="linkfunc.cpp" line="1696" id="unusedFunction" severity="style" msg="The function &apos;tf_flame&apos; is never used." />
    <error file="linkfunc.cpp" line="1697" id="unusedFunction" severity="style" msg="The function &apos;tf_flamethrower_burst&apos; is never used." />
    <error file="linkfunc.cpp" line="1698" id="unusedFunction" severity="style" msg="The function &apos;tf_gl_grenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1699" id="unusedFunction" severity="style" msg="The function &apos;tf_ic_rocket&apos; is never used." />
    <error file="linkfunc.cpp" line="1700" id="unusedFunction" severity="style" msg="The function &apos;tf_nailgun_nail&apos; is never used." />
    <error file="linkfunc.cpp" line="1701" id="unusedFunction" severity="style" msg="The function &apos;tf_rpg_rocket&apos; is never used." />
    <error file="linkfunc.cpp" line="1702" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_ac&apos; is never used." />
    <error file="linkfunc.cpp" line="1703" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_autorifle&apos; is never used." />
    <error file="linkfunc.cpp" line="1704" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_axe&apos; is never used." />
    <error file="linkfunc.cpp" line="1705" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_caltrop&apos; is never used." />
    <error file="linkfunc.cpp" line="1706" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_caltropgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1707" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_concussiongrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1708" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_empgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1709" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_flamethrower&apos; is never used." />
    <error file="linkfunc.cpp" line="1710" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_gasgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1711" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_genericprimedgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1712" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_gl&apos; is never used." />
    <error file="linkfunc.cpp" line="1713" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_ic&apos; is never used." />
    <error file="linkfunc.cpp" line="1714" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_knife&apos; is never used." />
    <error file="linkfunc.cpp" line="1715" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_medikit&apos; is never used." />
    <error file="linkfunc.cpp" line="1716" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_mirvbomblet&apos; is never used." />
    <error file="linkfunc.cpp" line="1717" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_mirvgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1718" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_nailgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1719" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_napalmgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1720" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_ng&apos; is never used." />
    <error file="linkfunc.cpp" line="1721" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_normalgrenade&apos; is never used." />
    <error file="linkfunc.cpp" line="1722" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_pl&apos; is never used." />
    <error file="linkfunc.cpp" line="1723" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_railgun&apos; is never used." />
    <error file="linkfunc.cpp" line="1724" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_rpg&apos; is never used." />
    <error file="linkfunc.cpp" line="1725" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_shotgun&apos; is never used." />
    <error file="linkfunc.cpp" line="1726" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_sniperrifle&apos; is never used." />
    <error file="linkfunc.cpp" line="1727" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_spanner&apos; is never used." />
    <error file="linkfunc.cpp" line="1728" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_superng&apos; is never used." />
    <error file="linkfunc.cpp" line="1729" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_supershotgun&apos; is never used." />
    <error file="linkfunc.cpp" line="1730" id="unusedFunction" severity="style" msg="The function &apos;tf_weapon_tranq&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
